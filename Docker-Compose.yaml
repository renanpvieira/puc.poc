version: '3.4'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: Zookeeper
    networks: 
      - compose-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: Kafka
    networks: 
      - compose-network
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: KafkaDrop
    networks: 
      - compose-network
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
  
  mongo:
    image: mongo
    container_name: Mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: QliIZ6xIHH3wYveK
    ports:
      - "27017:27017"
    expose:
      - "27017"  
    volumes:
      - mongodata:/data/db
    networks: 
      - compose-network
  
  mysql:
     image: mysql:5.7
     container_name: MySql
     environment:
       MYSQL_ROOT_PASSWORD: "Hkm25gRhan19JGWq"
     ports:
       - "3306:3306" 
     expose:
       - "3306"
     networks: 
      - compose-network  
     volumes:
       - mysqldata:/var/lib/mysql
     restart: always 

  poc.puc.modulo.agenda.rm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloagendarm
    container_name: agenda.read.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAgendaRM
    networks: 
      - compose-network
    ports:
      - "20001:80"
      
  poc.puc.modulo.agenda.wm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloagendawm
    container_name: agenda.write.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAgendaWM
    networks: 
      - compose-network
    ports:
      - "20002:80"

  poc.puc.modulo.agenda.api:
    image: ${DOCKER_REGISTRY-}pocpucmoduloagendaapi
    container_name: agenda.api
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAgendaAPI
    networks: 
      - compose-network
    ports:
      - "20003:80"      
  
  poc.puc.modulo.associado.rm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloassociadorm
    container_name: associado.read.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAssociadoRM
    networks: 
      - compose-network
    ports:
      - "20004:80"
      
  poc.puc.modulo.associado.wm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloassociadowm
    container_name: associado.write.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAssociadoWM
    networks: 
      - compose-network
    ports:
      - "20204:80"
  
  poc.puc.modulo.associado.api:
    image: ${DOCKER_REGISTRY-}pucpocmoduloassociadowebapi
    container_name: associado.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileAssociadoAPI
    networks: 
      - compose-network
    ports:
      - "20005:80"
  
  poc.puc.modulo.conveniado.api:
    image: ${DOCKER_REGISTRY-}pucpocmoduloconveniadowebapi
    container_name: conveniado.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileConveniadoAPI
    networks: 
      - compose-network
    ports:
      - "20006:80"
  
  poc.puc.modulo.file.api:
    image: ${DOCKER_REGISTRY-}pocpucmodulofileapi
    container_name: file.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileFileAPI
    networks: 
      - compose-network
    ports:
      - "20007:80"

  poc.puc.modulo.financeiro.rm:
    image: ${DOCKER_REGISTRY-}pocpucmodulofinanceirorm
    container_name: financeiro.read.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileFinanceiroRM
    networks: 
      - compose-network
    ports:
      - "20008:80"
      
  poc.puc.modulo.financeiro.wm:
    image: ${DOCKER_REGISTRY-}pocpucmodulofinanceirowm
    container_name: financeiro.write.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileFinanceiroWM
    networks: 
      - compose-network
    ports:
      - "20009:80"
  
  poc.puc.modulo.financeiro.api:
    image: ${DOCKER_REGISTRY-}pocpucmodulofinanceiroapi
    container_name: financeiro.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileFinanceiroAPI
    networks: 
      - compose-network
    ports:
      - "20010:80"      
  
  poc.puc.modulo.servico.rm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloservicorm
    container_name: servico.read.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileServicoRM
    networks: 
      - compose-network
    ports:
      - "20011:80"
      
  poc.puc.modulo.servico.wm:
    image: ${DOCKER_REGISTRY-}pocpucmoduloservicowm
    container_name: servico.write.model
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileServicoWM
    networks: 
      - compose-network
    ports:
      - "20012:80"
  
  poc.puc.modulo.servico.api:
    image: ${DOCKER_REGISTRY-}pocpucmoduloservicoapi
    container_name: servico.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileServicoAPI
    networks: 
      - compose-network
    ports:
      - "20013:80"
  
  poc.puc.modulo.basedata.api:
    image: ${DOCKER_REGISTRY-}pocpucmodulobasedataapi
    container_name: basedata.webapi
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileBaseDataApi
    networks: 
      - compose-network
    ports:
      - "20200:80"

  poc.puc.modulo.web.app:
    image: ${DOCKER_REGISTRY-}pocpucmodulowebapp
    container_name: web.app
    depends_on: 
        - mysql
        - mongo
        - kafka
    build:
      context: .
      dockerfile: DockerfileWebAPP
    networks: 
      - compose-network
    ports:
      - "20014:80"        

volumes:
    mysqldata:
    mongodata:
    
networks: 
  compose-network:
    driver: bridge  
      